security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
#            custom_authenticators:
#                - App\Security\AppAuthenticator
            
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: /accueil
                enable_csrf: true
            logout:
                path: app_logout   # La route à laquelle l'utilisateur sera redirigé pour se déconnecter
                target: /accueil   # La route où l'utilisateur sera redirigé après la déconnexion (ici la page d'accueil)
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 7 jours (en secondes)
                path: /
                always_remember_me: false
#            access_denied_url: /accueil
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Accès réservé aux administrateurs
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/dys/information/documents/new, roles: ROLE_ADMIN }
        - { path: ^/dys/edit, roles: ROLE_ADMIN }
        - { path: ^/photos/new, roles: ROLE_ADMIN }
        - { path: ^/popup/edit, roles: ROLE_ADMIN }

        # Accès réservé aux utilisateurs du bureau
        - { path: ^/bureau, roles: ROLE_BUREAU }

        # Accès réservé à tous les utilisateurs connectés
        - { path: ^/profile, roles: ROLE_USER }
        
        - { path: ^/benevoles/inscription, roles: PUBLIC_ACCESS }
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
